var C=Object.defineProperty,M=(e,r)=>{for(var n in r)C(e,n,{get:r[n],enumerable:!0})},m=class extends Error{constructor(e){super(e),this.name="NFError"}};function h(e){let r=t=>e[t],n=t=>e[t].get();return{fetch:n,mutate:(t,o)=>{let a=o(n(t));return e[t].set(a),h(e)},get:()=>e,entry:r}}var g=(e,r)=>Object.entries(e).reduce((n,[s,i])=>({...n,[s]:r(s,i)}),{}),d="__NATIVE_FEDERATION__",E=(e,r)=>{globalThis[d]||(globalThis[d]={});let n=globalThis[d],s={get(){return n[e]??r},set(i){return n[e]=i,s},exists(){return e in n}};return s},N=e=>g(e,E),F={externals:{},remoteNamesToRemote:{},baseUrlToRemoteNames:{}},b=g(F,E),I=()=>({createImportMap:n=>(document.head.appendChild(Object.assign(document.createElement("script"),{type:"importmap-shim",innerHTML:JSON.stringify(n)})),n),importModule:async n=>globalThis.importShim(n)}),S=e=>{let r=e.split("/");return r.pop(),r.join("/")},u=(e,r)=>(e=e.startsWith("/")?e.slice(1):e,r=r.endsWith("/")?r.slice(0,-1):r,`${e}/${r}`),$=e=>{let r=()=>({imports:{},scopes:{}}),n=o=>o.reduce((a,c)=>({imports:{...a.imports,...c.imports},scopes:{...a.scopes,...c.scopes}}),r()),s=(o,a)=>o.exposes.reduce((c,l)=>({...c,[u(a,l.key)]:u(o.baseUrl,l.outFileName)}),{}),i=o=>({[o.baseUrl+"/"]:e.mapSharedDeps(o)});return{toImportMap:(o,a)=>(a||(a=o.name),{imports:s(o,a),scopes:i(o)}),createEmpty:r,merge:n}},R=(e,r)=>{let n=t=>fetch(t).then(o=>o.json()).then(o=>({...o,baseUrl:S(t)})),s=(t,o)=>(e.mutate("remoteNamesToRemote",a=>({...a,[o]:t})),e.mutate("baseUrlToRemoteNames",a=>({...a,[t.baseUrl]:o})),t);return{loadRemoteInfo:(t,o)=>{if(!o&&t&&(o=e.fetch("baseUrlToRemoteNames")[S(t)]),!o)return Promise.reject("Must provide valid remoteEntry or remoteName");let a=e.fetch("remoteNamesToRemote")[o];return a?Promise.resolve(a):t?n(t).then(c=>s(c,o??c.name)).then(r.addSharedDepsToCache):Promise.reject(`Module not registered, provide a valid remoteEntryUrl for '${o}'`)}}},p=e=>`${e.packageName}@${e.version}`,x=e=>{let r=t=>e.fetch("externals")[p(t)],n=t=>t.shared.reduce((o,a)=>({...o,[a.packageName]:r(a)||u(t.baseUrl,a.outFileName)}),{}),s=t=>o=>t.shared.reduce((a,c)=>(a[p(c)]||(a[p(c)]=u(t.baseUrl,c.outFileName)),a),o);return{mapSharedDeps:n,addSharedDepsToCache:t=>(e.mutate("externals",s(t)),t)}},_=e=>({cache:e.cache??b}),D=({cache:e})=>{let r=h(e),n=x(r),s=R(r,n),i=$(n),t=I();return{cacheHandler:r,sharedInfoHandler:n,remoteInfoHandler:s,importMapHandler:i,domHandler:t}},j=(e,r)=>{let n=(t,o)=>{if(typeof t=="string"&&o)return{remoteName:t,exposedModule:o};if(typeof t=="object"&&!o)return t;throw new m("unexpected arguments: please pass options or a remoteName/exposedModule-pair")},s=(t,o)=>{let a=t.exposes.find(c=>c.key===o);if(!a)throw new m(`Unknown exposed module ${o} in remote ${t.name}`);return u(t.baseUrl,a.outFileName)};return{load:(t,o)=>{let a=n(t,o);if(!a.remoteName||a.remoteName==="")throw new m("remoteName cannot be empty");return e.loadRemoteInfo(a.remoteEntry,a.remoteName).then(c=>s(c,a.exposedModule)).then(r.importModule)}}};var w=(e,r,n)=>{let s=j(e,n),i=(c={})=>typeof c=="string"?fetch(c).then(l=>l.json()):Promise.resolve(c),t=([c,l])=>e.loadRemoteInfo(l,c).then(v=>r.toImportMap(v,c)).catch(v=>(console.warn(`Error loading remoteEntry for ${c} at '${l}', skipping module`),r.createEmpty())),o=c=>Promise.all(Object.entries(c).map(t)).then(r.merge);return{init:(c={})=>i(c).then(o).then(n.createImportMap).then(l=>({importMap:l,load:s.load}))}},T=(e={},r={})=>{let{remoteInfoHandler:n,importMapHandler:s,domHandler:i}=D(_(r));return w(n,s,i).init(e)},H={};M(H,{DEFAULT_CACHE:()=>b,NAMESPACE:()=>d,cacheHandlerFactory:()=>h,createGlobalCache:()=>N,toCache:()=>g});var P=(e,r)=>Object.entries(e).reduce((n,[s,i])=>({...n,[s]:r(s,i)}),{}),f="__NATIVE_FEDERATION__",A=(e,r)=>{let n={get(){let s=sessionStorage.getItem(`${f}.${e}`)??JSON.stringify(r);return JSON.parse(s)},set(s){let i=typeof s=="string"?s:JSON.stringify(s);return sessionStorage.setItem(`${f}.${e}`,i),n},exists(){return!!sessionStorage.getItem(`${f}.${e}`)}};return n},y=e=>P(e,A);(()=>{let e=y({externals:{},remoteNamesToRemote:{},baseUrlToRemoteNames:{}});T("http://localhost:3000/native-federation",{cache:e}).then(({load:r,importMap:n})=>{console.log("importMap: ",n),window.dispatchEvent(new CustomEvent("mfe-loader-available",{detail:{load:r}}))})})();
//# sourceMappingURL=loader.js.map
